// for문
// 배열 내의 데이터 접근 시 매번 인덱스 번호를 사용해야 한다.

// for (let i = 0; i < products.length; i++) {
//     // main logic
// }

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 배열의 메서드 : 배열.메서드()
// 배열.forEach() -> return 없음
// 배열.find() -> return 있음
// 배열.filter() -> return 있음
// 배열.map() -> return 있음

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// forEach
// return 값이 없다 !!

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const arr = [1, 5, 6];

// 기존 for문 작성방법
// for (let i = 0; i < arr.length; i++) {
//     console.log(arr[i]); // 출력값 : 1 5 6
// }

// forEach문 작성 방법
// arr.forEach(function (num) {
//     // console.log(num); // 출력값 : 1 5 6
//     // console.log(num * 2); // 출력값 : 2 10 12
// });

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 1
// const numbers = [1, 2, 3];

// numbers.forEach(function (number) {
//     console.log(number * 2);
// });

// 예상 결과
// 2
// 4
// 6

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 2
// const tutors = ["최원장", "김병연", "윤창식"];

// tutors.forEach(function (tutor) {
//     console.log(`${tutor} 튜터`);
// });

// 예상 결과
// 최원장 튜터
// 김병연 튜터
// 윤창식 튜터

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 3
// const tutors = [
//     {
//         name: "최원장",
//         age: 20,
//     },
//     {
//         name: "김병연",
//         age: 21,
//     },
//     {
//         name: "윤창식",
//         age: 22,
//     },
// ];

// tutors.forEach(function (tutor) {
//     console.log(tutor.age);
// });

// 예상 결과
// 20
// 21
// 22

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// find
// return 값이 있다 !!
// 데이터 하나를 찾을 때 사용한다.
// 즉, 조건을 만족하는 객체 1개만 반환한다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const arr = [1, 10, 15];

// const result = arr.find(function (num) {
//     return num > 2;
// });

// console.log(result); // 출력값 : 10

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const 어려운배열 = ["홍길동", "홍길순"];

// // 예제 1
// const result1 = 어려운배열.find(function (사람) {
//     return 사람 === "홍길순";
// });

// // 예제 2
// const result2 = 어려운배열.find(function (사람) {
//     사람 === "홍길순";
// });

// console.log(result1, result2); // 출력값 : 홍길순, undefined

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 3
// const movies = [
//     {
//         title: "오펜하이머",
//         year: 2014,
//         rating: 8.8,
//     },
//     {
//         title: "인셉션",
//         year: 2010,
//         rating: 8.8,
//     },
// ];

// const result = movies.find(function (m) {
//     return m.title === "오펜하이머";
// });

// console.log(result); // 오펜하이머

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// filter
// return 값이 있다 !!
// 조건에 맞는 데이터를 모두 찾을 때 사용한다.
// 즉, 조건을 만족하는 객체 전부를 배열로 반환한다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 1
// const movies = [
//     {
//         title: "오펜하이머",
//         year: 2014,
//         rating: 8.8,
//     },
//     {
//         title: "인셉션",
//         year: 2010,
//         rating: 8.8,
//     },
// ];

// const result = movies.filter(function (m) {
//     return m.rating > 8.5;
// });

// console.log(result);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 2
// const movies = [
//     {
//         title: "오펜하이머",
//         year: 2014,
//         rating: 8.53,
//     },
//     {
//         title: "인셉션",
//         year: 2010,
//         rating: 9.47,
//     },
//     {
//         title: "범죄도시",
//         year: 2024,
//         rating: 7.52,
//     },
//     {
//         title: "베테랑2",
//         year: 2024,
//         rating: 6.61,
//     },
// ];

// const result = movies.filter(function (m) {
//     return m.year >= 2020;
// });

// console.log(result);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// map
// return 값이 있다 !!
// 똑같은 배열 요소의 개수를 갖는 새로운 배열을 만든다.
// 즉, 기존 배열은 유지하면서 원본 배열의 길이만큼 새로운 배열을 반환한다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const arr = [5, 10, 2];

// const result = arr.map(function (num) {
//     // return 1; // 출력값 : [1, 1, 1]
//     // return "한우"; // 출력값 : ["한우", "한우", "한우"]
//     // return num * 2; // 출력값 : [10, 20, 4]
//     return {
//         age: num,
//         name: "테스트",
//     };
// });

// console.log(result);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 1
// const tutors = [
//     {
//         name: "최원장",
//         age: 20,
//     },
//     {
//         name: "김병연",
//         age: 21,
//     },
//     {
//         name: "윤창식",
//         age: 22,
//     },
// ];

// const afterTenYears = tutors.map(function (tutor) {
//     return {
//         name: tutor.name,
//         age: tutor.age + 10,
//     };
// });

// console.log(afterTenYears);

// 예상 결과
// { name: '최원장', age: 30 }
// { name: '김병연', age: 31 }
// { name: '윤창식', age: 32 }

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 예제 2
// const tutors = [
//     {
//         name: "최원장",
//         age: 20,
//     },
//     {
//         name: "김병연",
//         age: 21,
//     },
//     {
//         name: "윤창식",
//         age: 22,
//     },
// ];

// const newToturs = tutors.map(function (tutor) {
//     return {
//         name: `${tutor.name} 튜터`,
//         age: tutor.age,
//     };
// });

// console.log(newToturs);

// 예상 결과
// { name: '최원장 튜터', age: 20 }
// { name: '김병연 튜터', age: 21 }
// { name: '윤창식 튜터', age: 22 }

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// Spread operator (전개 연산자)
// 새로운 배열을 만들 수 있다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// let a = [1, 2, 3];

// console.log(...a); // 출력값 : 1 2 3
// console.log(1, 2, 3); // 출력값 : 1 2 3

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// let a = [1, 2, 3];
// let b = [...a]; // b는 새로운 배열

// console.log(b); // 출력값 : [1, 2, 3]

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// let a = [1, 2, 3];
// let b = [...a];

// a[0] = 100;

// console.log(a); // 출력값 : [100, 2, 3]
// console.log(b); // 출력값 : [1, 2, 3]

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// Destructuring (구조 분해 할당)
// 배열, 객체 안의 데이터를 뽑아서 사용한다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const 동물리스트 = ["강아지", "고양이"];
// const [dog, cat] = 동물리스트;

// console.log(dog); // 출력값 : 강아지
// console.log(cat); // 출력값 : 고양이

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const product = {
//     상품명: "멋진셔츠",
//     가격: 10000,
// };

// const { 가격, 상품명 } = product;

// console.log(가격); // 출력값 : 10000
// console.log(상품명); // 출력값 : 멋진셔츠

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
